---
layout: post
title: "Ruby 语言拾趣"
published: false
categories:
- Ruby
---

本文是我学习 Ruby 语言过程中的笔记，记录了 Ruby 语言中那些基础但又重要的概念。讨论的版本为 Ruby 2，但由于某些特性和旧版本存在不兼容的情况，会说明各版本之间的差异。

### 编码
从 Ruby 2.0 开始，默认的源文件编码是 UTF-8（[见此处][1]）。而在之前的版本中，默认编码是 ASCII。Ruby 1.9 开始支持[魔法注释][2]，如果文件中使用了非 ASCII 字符，必须通过魔法注释来指定文件的编码。Ruby 1.8 对编码不敏感，字符串只是纯粹的字节流，所以不编码也没有关系。

### 代码布局
Ruby 是[面向行的][3]（line-oriented）语言。当解析器遇到行末时，如果能判断语句是完整的，就结束语句，否则延续到下一行继续解析，比如一行的最后一个 [token][4] 是运算符或逗号。可以用分号结束语句，还可以用位于行末的反斜线延续到下一行。

单行注释以井号开始，一直延伸到物理行的末尾。多行注释以 `=begin` 打头的行开始，以 `=end` 打头的行来结束。如果 Ruby 遇到只包含 `__END__` 的一行，就会结束该程序文件。`__END__` 之后的行不会执行，但可以通过 `DATA` 对象来访问这些行。

此外，Ruby 还允许指定文件加载时执行的块（`BEGIN` blocks）和程序结束后执行的块（`END` blocks）。一个程序可以包含多个 `BEGIN` 和 `END` blocks，`BEGIN` blocks 以声明的顺序执行，`END` blocks 以相反的顺序执行。

<h3 id="GDS">通用定界语法</h3>
Ruby 提供了通用定界语法来表示各种字面量。这种语法以百分号开头，紧跟着一个字符来指定字面量的类型。例如 `%q` 和 `%Q` 表示字符串类型，`%w` 和 `%W` 表示字符串数组类型，`%i` 和 `%I` 表示符号数组类型（Ruby 2.0 可用），`%r` 表示正则表达式类型，等等。

类型字符后面紧接着定界符，定界符可以是任何非字母数字或非多字节字符。如果定界符是 `(`, `[`, `{` 和 `<` 这四个字符之一，字面量会在匹配的关闭定界符处结束，其中可包含嵌套的定界符对。对于其他定界符，字面量以下一个定界符结束。

对于多行字符串，换行符和后续每一行开头的空白都会包含在这个字符串里面。

### 基本类型
Ruby 中，整数不是 `Fixnum` 就是 `Bignum`。如果整数可以用比机器的字长少 1 的位来表示，就用 `Fixnum` 类表示；如果超出这个范围，就用 `Bignum` 类来表示。这两种类型之间的转换是透明的。

Ruby 解释器内建了有理数（[`Rational`][5]）和复数（[`Complex`][6]）的类，但没有字面量来表示它们，Ruby 没有为这些数值类型提供语言层面上的支持。

### 转义和插值
单引号字符串不支持插值，只转义反斜线和定界符；双引号字符串既支持插值，同时也比单引号字符串支持更多类型的转义。在 here document 中，如果用带引号的字符串指定终止符，引号的规则会应用到 here document，否则，使用双引号规则。

在[通用定界语法][7]中，以大写字母表示类型（`%Q`, `%W`, `%I`）的字面量中，也支持插值和转义；而对应的以小写字母表示类型（`%q`, `%w`, `%i`）的字面量却不支持插值。

### 命名约定
局部变量名以小写字母或下划线开头；实例变量名以 `@` 开头；类变量名以 `@@` 开头；全局变量名以 `$` 开头；常量名以大写字母开头。一般来说，类名和模块名采用驼峰式写法，比如 `MixedCase`；其他常量名全部大写，并以下划线分隔，例如 `NUMBER_OF_WEEK = 7`。

### 歧义消除
以小写字母开头的名字（例如 `foobar`）有两种含义：可能是局部变量，也有可能是不带参数的消息发送。这里出现了歧义，Ruby 需要分辨出到底是哪种含义。规则是：如果名字所引用的局部变量尚未初始化，就解释为不带参数的消息发送。应尽量避免局部变量和方法重名。

除此之外，以大写字母开头的名字（例如 `Foobar`）也有歧义，它可能是常量，也可能是不带参数的消息发送（Ruby 允许以大写字母开头的方法名），这时歧义消除的规则比较简单：Ruby 会认为它是个常量，如果没找到这个常量，就抛出异常。

### 弱类型
Ruby 是弱类型语言，变量的类型仅取决于它引用的对象所能响应的消息，即 [Duck typing][8]。一个变量可以在不同时候引用不同类型的对象。

### 查找常量
首先，Ruby 会依次在 `Module.nesting` 返回的模块中查找，如果没有找到，则继续在 `Module.nesting.first.ancestors` 中查找，如果 `Module.nesting.first` 是 `nil` 或模块，则在 `Object.ancestors` 中进一步查找。请参考[此文][10]。

### 类变量
在 Ruby 中，子类会共享父类中的类变量，并且父类中的类变量将覆盖子类中同名的类变量。总的来说，Ruby 查找类变量的逻辑是：逐一遍历祖先链，然后取最上游的类变量。除此之外，类变量还有许多出乎意料的地方，并且在不同版本中行为不一致。因此，很多人建议不使用它。

### 作用域
类定义、模块定义和方法定义会暂时离开先前的作用域，并打开一个新的作用域，边界由关键字 `class`, `module` 和 `def` 来确定。Ruby 查找变量时，不会越过这些作用域，也不会形成作用域链。因此，这些关键字充当了[作用域门][11]（Scope Gate）的角色。

块也会创建新的作用域，但块的作用域不是封闭的，并且可以嵌套，可以在块中访问外部变量。可以利用块来构建[扁平化作用域][12]。另外，`while`, `until` 和 `for` 循环不会创建新的作用域。循环体可以访问外部变量，在循环体中创建的变量也可以在循环体结束后访问。

### 块
块会保留它们被创建的作用域中已存在的局部变量，并且成为它们绑定的一部分。块会和该作用域共享这些变量，除非你显式将这些变量声明为块的局部变量（Ruby 1.9 支持，方法是在块参数列表的分号后指定）。在其他语言中，把这种特性称为[闭包][13]（Closure）。

### 预定义变量
Ruby 预定义了许多变量，用来处理异常、模式匹配、输入输出、环境变量，等等。许多变量以美元符号 `$` 开头，这受到了 Perl 语言的影响。此外，还有标准对象，比如 `nil`, `self`, `ARGV` 等；以及全局常量，比如 `DATA`, `FALSE`, `NIL` 等。

[1]: https://bugs.ruby-lang.org/issues/6679
[2]: http://en.wikibooks.org/wiki/Ruby_Programming/Encoding#Using_Encodings
[3]: http://en.wikipedia.org/wiki/Line-oriented_programming_language
[4]: http://en.wikipedia.org/wiki/Token_(parser)#Token
[5]: http://www.ruby-doc.org/core-2.0.0/Rational.html
[6]: http://www.ruby-doc.org/core-2.0.0/Complex.html
[7]: #GDS
[8]: http://en.wikipedia.org/wiki/Duck_typing
[9]: http://cirw.in/blog/constant-lookup
[10]: http://cirw.in/blog/constant-lookup
[11]: http://hopsoft.github.io/blog/ruby-metaprogramming-idioms/#scope_gate
[12]: http://hopsoft.github.io/blog/ruby-metaprogramming-idioms/#flat_scope
[13]: http://en.wikipedia.org/wiki/Closure_(computer_programming)
